{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-03-04T20:48:29.701038Z", "invocation_id": "a9e16127-cb9e-43d5-9541-46ba3864fe9b", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:26.633374Z", "completed_at": "2024-03-04T20:48:26.665311Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:26.667652Z", "completed_at": "2024-03-04T20:48:26.667662Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05321907997131348, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.develop.my_first_dbt_model", "compiled": true, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "relation_name": "`dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:26.659680Z", "completed_at": "2024-03-04T20:48:27.018895Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.022320Z", "completed_at": "2024-03-04T20:48:27.022352Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4076371192932129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__event_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`klaviyo`.`event`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__event_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:26.663027Z", "completed_at": "2024-03-04T20:48:27.019779Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.023087Z", "completed_at": "2024-03-04T20:48:27.023106Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.40813207626342773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__flow_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`klaviyo`.`flow`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__flow_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.039122Z", "completed_at": "2024-03-04T20:48:27.045668Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.047599Z", "completed_at": "2024-03-04T20:48:27.047609Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018669843673706055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.develop.my_second_dbt_model", "compiled": true, "compiled_code": "-- Use the `ref` function to select from other models\n\nselect *\nfrom `dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`\nwhere id = 1", "relation_name": "`dbt-package-testing`.`zz_dbt_renee`.`my_second_dbt_model`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:26.644127Z", "completed_at": "2024-03-04T20:48:27.047110Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.049436Z", "completed_at": "2024-03-04T20:48:27.049443Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.43446922302246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__campaign_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`klaviyo`.`campaign`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__campaign_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:26.669685Z", "completed_at": "2024-03-04T20:48:27.073336Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.073913Z", "completed_at": "2024-03-04T20:48:27.073919Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.40584278106689453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__metric_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`klaviyo`.`metric`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__metric_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.069362Z", "completed_at": "2024-03-04T20:48:27.074173Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.075978Z", "completed_at": "2024-03-04T20:48:27.075982Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.024513959884643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.develop.unique_my_first_dbt_model_id.16e066b321", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.053685Z", "completed_at": "2024-03-04T20:48:27.074421Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.076269Z", "completed_at": "2024-03-04T20:48:27.076273Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.026525020599365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.develop.not_null_my_first_dbt_model_id.5fb22c2710", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.085849Z", "completed_at": "2024-03-04T20:48:27.088512Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.088878Z", "completed_at": "2024-03-04T20:48:27.088882Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006812095642089844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.develop.not_null_my_second_dbt_model_id.151b76d778", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt-package-testing`.`zz_dbt_renee`.`my_second_dbt_model`\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.090143Z", "completed_at": "2024-03-04T20:48:27.092366Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.092705Z", "completed_at": "2024-03-04T20:48:27.092708Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.003329038619995117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.develop.unique_my_second_dbt_model_id.57a0f8c493", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee`.`my_second_dbt_model`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.032325Z", "completed_at": "2024-03-04T20:48:27.411227Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.413121Z", "completed_at": "2024-03-04T20:48:27.413141Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3855619430541992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__person_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `dbt-package-testing`.`klaviyo`.`person`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__person_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.093851Z", "completed_at": "2024-03-04T20:48:27.519452Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.520617Z", "completed_at": "2024-03-04T20:48:27.520623Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4279770851135254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__campaign", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__campaign_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_type\n    \n as \n    \n    campaign_type\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    email_template_id\n    \n as \n    \n    email_template_id\n    \n, \n    \n    \n    from_email\n    \n as \n    \n    from_email\n    \n, \n    \n    \n    from_name\n    \n as \n    \n    from_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    send_time\n    \n as \n    \n    send_time\n    \n, \n    \n    \n    sent_at\n    \n as \n    \n    sent_at\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    status_id\n    \n as \n    \n    status_id\n    \n, \n    \n    \n    status_label\n    \n as \n    \n    status_label\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    cast(null as boolean) as \n    \n    archived\n    \n , \n    cast(null as timestamp) as \n    \n    scheduled\n    \n \n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        campaign_type,\n        created as created_at,\n        email_template_id,\n        from_email,\n        from_name,\n        cast(id as string ) as campaign_id,\n        name as campaign_name,\n        send_time as scheduled_to_send_at,\n        sent_at,\n        coalesce(status, lower(status_label)) as status,\n        status_id,\n        subject,\n        updated as updated_at,\n        archived as is_archived,\n        scheduled as scheduled_at,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__campaign`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.083550Z", "completed_at": "2024-03-04T20:48:27.519708Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.520835Z", "completed_at": "2024-03-04T20:48:27.520838Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4397900104522705, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__flow", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__flow_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    cast(null as boolean) as \n    \n    archived\n    \n , \n    cast(null as string) as \n    \n    trigger_type\n    \n \n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        created as created_at,\n        cast(id as string ) as flow_id,\n        name as flow_name,\n        status,\n        updated as updated_at,\n        archived as is_archived,\n        trigger_type,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__flow`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.078661Z", "completed_at": "2024-03-04T20:48:27.520387Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.522085Z", "completed_at": "2024-03-04T20:48:27.522089Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.44643712043762207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__event", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__event_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _variation\n    \n as \n    \n    _variation\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    datetime\n    \n as \n    \n    datetime\n    \n, \n    \n    \n    flow_id\n    \n as \n    \n    flow_id\n    \n, \n    \n    \n    flow_message_id\n    \n as \n    \n    flow_message_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    metric_id\n    \n as \n    \n    metric_id\n    \n, \n    \n    \n    person_id\n    \n as \n    \n    person_id\n    \n, \n    \n    \n    timestamp\n    \n as \n    \n    timestamp\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    cast(null as string) as \n    \n    property_value\n    \n \n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nrename as (\n    \n    select \n        _variation as variation_id,\n        cast(campaign_id as string ) as campaign_id,\n        cast(timestamp as timestamp ) as occurred_at,\n        cast(flow_id as string ) as flow_id,\n        flow_message_id,\n        cast(id as string ) as event_id,\n        cast(metric_id as string ) as metric_id,\n        cast(person_id as string ) as person_id,\n        type,\n        uuid,\n        property_value as numeric_value,\n        cast(_fivetran_synced as timestamp ) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n),\n\nfinal as (\n    \n    select \n        *,\n        cast( timestamp_trunc(\n        cast(occurred_at as timestamp),\n        day\n    ) as date) as occurred_on,\n        to_hex(md5(cast(coalesce(cast(event_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') as string))) as unique_event_id\n\n    from rename\n\n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__event`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.532163Z", "completed_at": "2024-03-04T20:48:27.534260Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.534940Z", "completed_at": "2024-03-04T20:48:27.534943Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010957956314086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__campaign_campaign_id.5dfc47dc1d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__campaign`\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.527084Z", "completed_at": "2024-03-04T20:48:27.534463Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.535111Z", "completed_at": "2024-03-04T20:48:27.535113Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012244939804077148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__campaign_campaign_id__source_relation.59158488ff", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__campaign`\n    group by campaign_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.537173Z", "completed_at": "2024-03-04T20:48:27.576573Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.581357Z", "completed_at": "2024-03-04T20:48:27.581362Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04534101486206055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__flow_flow_id__source_relation.015215d481", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        flow_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__flow`\n    group by flow_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.539704Z", "completed_at": "2024-03-04T20:48:27.582104Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.582872Z", "completed_at": "2024-03-04T20:48:27.582875Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.054750919342041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__flow_flow_id.a00a897e42", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect flow_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__flow`\nwhere flow_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.583139Z", "completed_at": "2024-03-04T20:48:27.592256Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.594540Z", "completed_at": "2024-03-04T20:48:27.594544Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01255178451538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.int_klaviyo__event_attribution", "compiled": true, "compiled_code": "\n\nwith events as (\n\n    select \n        *,\n        -- no event will be attributed to both a campaign and flow\n        coalesce(campaign_id, flow_id) as touch_id,\n        case \n            when campaign_id is not null then 'campaign' \n            when flow_id is not null then 'flow' \n        else null end as touch_type -- defintion: touch = interaction with campaign/flow\n\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__event`\n\n    \n    -- grab **ALL** events for users who have any events in this new increment\n    where person_id in (\n\n        select distinct person_id\n        from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__event`\n\n        -- most events (from all kinds of integrations) at least once every hour\n        -- https://help.klaviyo.com/hc/en-us/articles/115005253208\n        where _fivetran_synced >= cast(coalesce( \n            (\n                select \n\n        datetime_add(\n            cast( max(_fivetran_synced) as datetime),\n        interval -1 hour\n        )\n\n  \n                from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__event_attribution`\n            ), '2012-01-01') as timestamp ) -- klaviyo was founded in 2012, so let's default the min date to then\n    )\n    \n),\n\n-- sessionize events based on attribution eligibility -- is it the right kind of event, and does it have a campaign or flow?\ncreate_sessions as (\n    select\n        *,\n        -- default klaviyo__event_attribution_filter limits attribution-eligible events to to email opens, email clicks, and sms opens\n        -- https://help.klaviyo.com/hc/en-us/articles/115005248128\n\n        -- events that come with flow/campaign attributions (and are eligible event types) will create new sessions.\n        -- non-attributed events that come in afterward will be batched into the same attribution-session\n        sum(case when touch_id is not null\n        \n            and lower(type) in ('opened email', 'clicked email', 'clicked sms')\n        \n            then 1 else 0 end) over (\n                partition by person_id, source_relation order by occurred_at asc rows between unbounded preceding and current row) as touch_session \n\n    from events\n\n),\n\n-- \"session start\" refers to the event in a \"touch session\" that is already attributed with a campaign or flow by Klaviyo\n-- a new event that is attributed with a campaign/flow will trigger a new session, so there will only be one already-attributed event per each session \n-- events that are missing attributions will borrow data from the event that triggered the session, if they are in the lookback window (see `attribute` CTE)\nlast_touches as (\n\n    select \n        *,\n        -- when did the touch session begin?\n        min(occurred_at) over(partition by person_id, source_relation, touch_session) as session_start_at,\n\n        -- get the kind of metric/event that triggered the attribution session, in order to decide \n        -- to use the sms or email lookback value. \n        first_value(type) over(\n            partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row) as session_event_type\n\n    from create_sessions\n),\n\nattribute as (\n\n    select \n        *,\n        -- klaviyo uses different lookback windows for email and sms events\n        -- default email lookback = 5 days (120 hours) -> https://help.klaviyo.com/hc/en-us/articles/115005248128#conversion-tracking1\n        -- default sms lookback: 1 day (24 hours -> https://help.klaviyo.com/hc/en-us/articles/115005248128#sms-conversion-tracking7\n\n        coalesce(touch_id, -- use pre-attributed flow/campaign if provided\n            case \n            when \n\n    datetime_diff(\n        cast(occurred_at as datetime),\n        cast(session_start_at as datetime),\n        hour\n    )\n\n   <= (\n                case \n                when lower(session_event_type) like '%sms%' then 24\n                else 120 end\n            ) -- if the events fall within the lookback window, attribute\n            then first_value(touch_id) over (\n                partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row)\n            else null end) as last_touch_id -- session qualified for attribution -> we will call this \"last touch\"\n\n    from last_touches \n),\n\nfinal as (\n\n    select\n        *,\n\n        -- get whether the event is attributed to a flow or campaign\n        coalesce(touch_type, first_value(touch_type) over(\n            partition by person_id, source_relation, touch_session order by occurred_at asc rows between unbounded preceding and current row)) \n\n            as session_touch_type -- if the session events qualified for attribution, extract the type of touch they are attributed to\n\n    from attribute \n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__event_attribution`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.592425Z", "completed_at": "2024-03-04T20:48:27.595294Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.596135Z", "completed_at": "2024-03-04T20:48:27.596139Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006219148635864258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__event_event_id__source_relation.3778c651d7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__event`\n    group by event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.596311Z", "completed_at": "2024-03-04T20:48:27.598808Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.600822Z", "completed_at": "2024-03-04T20:48:27.600825Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0056209564208984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__event_event_id.7a09ac6ec1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__event`\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.599255Z", "completed_at": "2024-03-04T20:48:27.603590Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.603934Z", "completed_at": "2024-03-04T20:48:27.603937Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0056760311126708984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__event_attribution_event_id__source_relation.654b98ad2c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__event_attribution`\n    group by event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.601940Z", "completed_at": "2024-03-04T20:48:27.604432Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.604805Z", "completed_at": "2024-03-04T20:48:27.604808Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0035610198974609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_int_klaviyo__event_attribution_event_id.8d186152c4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__event_attribution`\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.419216Z", "completed_at": "2024-03-04T20:48:27.716661Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.717247Z", "completed_at": "2024-03-04T20:48:27.717254Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3006269931793213, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__metric", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__metric_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    integration_id\n    \n as \n    \n    integration_id\n    \n, \n    cast(null as string) as \n    \n    integration_category\n    \n , \n    cast(null as string) as \n    \n    integration_name\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        created as created_at,\n        cast(id as string ) as metric_id,\n        cast(integration_id as string ) as integration_id,\n        integration_name,\n        integration_category,\n        name as metric_name,\n        updated as updated_at,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__metric`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.719921Z", "completed_at": "2024-03-04T20:48:27.726678Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.727388Z", "completed_at": "2024-03-04T20:48:27.727393Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009454011917114258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__metric_metric_id__source_relation.e9f33c04e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        metric_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__metric`\n    group by metric_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.723081Z", "completed_at": "2024-03-04T20:48:27.727141Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.728492Z", "completed_at": "2024-03-04T20:48:27.728495Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009827852249145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__metric_metric_id.4759d62078", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metric_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__metric`\nwhere metric_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.524777Z", "completed_at": "2024-03-04T20:48:27.920103Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.920843Z", "completed_at": "2024-03-04T20:48:27.920850Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.39832019805908203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo_source.stg_klaviyo__person", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__person_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    organization\n    \n as \n    \n    organization\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    region\n    \n as \n    \n    region\n    \n, \n    \n    \n    timezone\n    \n as \n    \n    timezone\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n, \n    cast(null as timestamp) as \n    \n    last_event_date\n    \n \n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string ) as person_id,\n        address_1,\n        address_2,\n        city,\n        country,\n        zip,\n        created as created_at,\n        email,\n        first_name || ' ' || last_name as full_name,\n        latitude,\n        longitude,\n        organization,\n        phone_number,\n        region, -- state in USA\n        timezone,\n        title,\n        updated as updated_at,\n        last_event_date,\n        source_relation\n        \n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__person`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.926457Z", "completed_at": "2024-03-04T20:48:27.952621Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.953862Z", "completed_at": "2024-03-04T20:48:27.953867Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.031217098236083984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.dbt_utils_unique_combination_of_columns_stg_klaviyo__person_person_id__source_relation.33a4f9ca24", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__person`\n    group by person_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.931195Z", "completed_at": "2024-03-04T20:48:27.952868Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:27.954231Z", "completed_at": "2024-03-04T20:48:27.954235Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.031102895736694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo_source.not_null_stg_klaviyo__person_person_id.bd77ffc8aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect person_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__person`\nwhere person_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:27.934536Z", "completed_at": "2024-03-04T20:48:28.353147Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:28.354839Z", "completed_at": "2024-03-04T20:48:28.354859Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.43152284622192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__events", "compiled": true, "compiled_code": "\n-- ^ the incremental strategy is split into delete+insert for snowflake since there is a bit of\n-- overlap in transformed data blocks for incremental runs (we look back an extra hour, see lines 23 - 30)\n-- this configuration solution was taken from https://docs.getdbt.com/reference/resource-configs/snowflake-configs#merge-behavior-incremental-models\n\nwith events as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__event_attribution`\n\n    \n\n    -- most events (from all kinds of integrations) at least once every hour\n    where _fivetran_synced >= cast(coalesce( \n            (\n                select \n\n        datetime_add(\n            cast( max(_fivetran_synced) as datetime),\n        interval -1 hour\n        )\n\n  \n                from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__events`\n            ), '2012-01-01') as timestamp ) -- klaviyo was founded in 2012, so let's default the min date to then\n    \n),\n\nevent_fields as (\n\n    -- excluding some fields to rename them and/or make them null if needed\n    \n    -- as of the patch release of dbt-utils v0.7.3, the snowflake uppercasing is not needed anymore so we have deleted the snowflake conditional in the exclusion\n\n    select \n        `variation_id`,\n  `campaign_id`,\n  `occurred_at`,\n  `flow_id`,\n  `flow_message_id`,\n  `event_id`,\n  `metric_id`,\n  `person_id`,\n  `uuid`,\n  `numeric_value`,\n  `_fivetran_synced`,\n  `source_relation`,\n  `occurred_on`,\n  `unique_event_id`,\n  `touch_id`,\n  `touch_type`,\n\n        type, -- need to pull this out because it gets removed by dbt_utils.star, due to being a substring of 'session_event_type' and 'session_touch_type'\n\n        -- split out campaign and flow IDs\n        case \n            when session_touch_type = 'campaign' then last_touch_id \n        else null end as last_touch_campaign_id,\n        case \n            when session_touch_type = 'flow' then last_touch_id \n        else null end as last_touch_flow_id,\n\n        -- only make these non-null if the event indeed qualified for attribution\n        case \n            when last_touch_id is not null then session_start_at \n        else null end as last_touch_at,\n        case \n            when last_touch_id is not null then session_event_type \n        else null end as last_touch_event_type,\n        case \n            when last_touch_id is not null then session_touch_type \n        else null end as last_touch_type -- flow vs campaign\n\n    \n    from events\n),\n\ncampaign as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__campaign`\n),\n\nflow as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__flow`\n),\n\nperson as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__person`\n),\n\n-- just pulling this to join with INTEGRATION\nmetric as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__metric`\n),\n\njoin_fields as (\n\n    select\n        event_fields.*,\n        campaign.campaign_name,\n        campaign.campaign_type,\n        campaign.subject as campaign_subject_line,\n        flow.flow_name, \n        person.city as person_city,\n        person.country as person_country,\n        person.region as person_region,\n        person.email as person_email,\n        person.timezone as person_timezone,\n        metric.integration_id,\n        metric.integration_name,\n        metric.integration_category\n\n    from event_fields\n    left join campaign on (\n      event_fields.last_touch_campaign_id = campaign.campaign_id\n      and\n      event_fields.source_relation = campaign.source_relation\n    )\n    left join flow on (\n      event_fields.last_touch_flow_id = flow.flow_id\n      and\n      event_fields.source_relation = flow.source_relation  \n    )\n    left join person on (\n      event_fields.person_id = person.person_id\n      and\n      event_fields.source_relation = person.source_relation\n    )\n    left join metric on (\n      event_fields.metric_id = metric.metric_id\n      and\n      event_fields.source_relation = metric.source_relation\n    )\n)\n\nselect * from join_fields", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:28.380539Z", "completed_at": "2024-03-04T20:48:28.389902Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:28.391434Z", "completed_at": "2024-03-04T20:48:28.391442Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03164315223693848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__events_event_id__source_relation.847dad4174", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__events`\n    group by event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:28.386346Z", "completed_at": "2024-03-04T20:48:28.390277Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:28.391976Z", "completed_at": "2024-03-04T20:48:28.391980Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03163409233093262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_klaviyo__events_event_id.eada7340ba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__events`\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:28.364445Z", "completed_at": "2024-03-04T20:48:28.390895Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:28.392906Z", "completed_at": "2024-03-04T20:48:28.392910Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.034230947494506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__person_campaign_flow", "compiled": true, "compiled_code": "with events as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__events`\n),\n\npivot_out_events as (\n    \n    select \n        person_id,\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        campaign_name,\n        flow_name,\n        variation_id,\n        source_relation,\n        min(occurred_at) as first_event_at,\n        max(occurred_at) as last_event_at\n\n    -- sum up the numeric value associated with events (most likely will mean revenue)\n    \n    , sum(case when lower(type) = 'refunded order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_refunded_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'placed order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_placed_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'ordered product' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_ordered_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'checkout started' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_checkout_started -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'cancelled order' then \n            coalesce(\n    \n    safe_cast(numeric_value as numeric)\n\n, 0)\n            else 0 end) \n        as sum_revenue_cancelled_order -- removing special characters that I have seen in different integration events\n    \n\n    -- count up the number of instances of each metric\n    \n    , sum(case when lower(type) = 'active on site' then 1 else 0 end) \n        as count_active_on_site -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'viewed product' then 1 else 0 end) \n        as count_viewed_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'ordered product' then 1 else 0 end) \n        as count_ordered_product -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'placed order' then 1 else 0 end) \n        as count_placed_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'refunded order' then 1 else 0 end) \n        as count_refunded_order -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'received email' then 1 else 0 end) \n        as count_received_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'clicked email' then 1 else 0 end) \n        as count_clicked_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'opened email' then 1 else 0 end) \n        as count_opened_email -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'marked email as spam' then 1 else 0 end) \n        as count_marked_email_as_spam -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed' then 1 else 0 end) \n        as count_unsubscribed -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'received sms' then 1 else 0 end) \n        as count_received_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'clicked sms' then 1 else 0 end) \n        as count_clicked_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'sent sms' then 1 else 0 end) \n        as count_sent_sms -- removing special characters that I have seen in different integration events\n    \n    , sum(case when lower(type) = 'unsubscribed from sms' then 1 else 0 end) \n        as count_unsubscribed_from_sms -- removing special characters that I have seen in different integration events\n    \n\n    from events\n    group by 1,2,3,4,5,6,7\n)\n\nselect *\nfrom pivot_out_events", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__person_campaign_flow`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:28.404256Z", "completed_at": "2024-03-04T20:48:28.408835Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:28.409300Z", "completed_at": "2024-03-04T20:48:28.409304Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013071060180664062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__person_campaign_flow_person_id__last_touch_campaign_id__last_touch_flow_id__variation_id__source_relation.30e1824079", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, last_touch_campaign_id, last_touch_flow_id, variation_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__person_campaign_flow`\n    group by person_id, last_touch_campaign_id, last_touch_flow_id, variation_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:28.401026Z", "completed_at": "2024-03-04T20:48:28.681153Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:28.682923Z", "completed_at": "2024-03-04T20:48:28.682939Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.28799915313720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.int_klaviyo__person_metrics", "compiled": true, "compiled_code": "with person_campaign_flow as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__person_campaign_flow`\n),\n\nagg_metrics as (\n\n    select\n        person_id,\n        source_relation,\n        count(distinct last_touch_campaign_id) as count_total_campaigns,\n        count(distinct last_touch_flow_id) as count_total_flows,\n        min(first_event_at) as first_event_at, -- first ever event occurred at\n        max(last_event_at) as last_event_at, -- last ever event occurred at\n        min(distinct case when last_touch_campaign_id is not null then first_event_at end) as first_campaign_touch_at,\n        max(distinct case when last_touch_campaign_id is not null then last_event_at end) as last_campaign_touch_at,\n        min(distinct case when last_touch_flow_id is not null then first_event_at end) as first_flow_touch_at,\n        max(distinct case when last_touch_flow_id is not null then last_event_at end) as last_flow_touch_at\n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_refunded_order ) as total_sum_revenue_refunded_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_refunded_order else 0 end ) as organic_sum_revenue_refunded_order\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_placed_order ) as total_sum_revenue_placed_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_placed_order else 0 end ) as organic_sum_revenue_placed_order\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_ordered_product ) as total_sum_revenue_ordered_product\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_ordered_product else 0 end ) as organic_sum_revenue_ordered_product\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_checkout_started ) as total_sum_revenue_checkout_started\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_checkout_started else 0 end ) as organic_sum_revenue_checkout_started\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( sum_revenue_cancelled_order ) as total_sum_revenue_cancelled_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n        , sum( case when coalesce(last_touch_campaign_id, last_touch_flow_id) is null then sum_revenue_cancelled_order else 0 end ) as organic_sum_revenue_cancelled_order\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_active_on_site ) as total_count_active_on_site\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_viewed_product ) as total_count_viewed_product\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_ordered_product ) as total_count_ordered_product\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_placed_order ) as total_count_placed_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_refunded_order ) as total_count_refunded_order\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_received_email ) as total_count_received_email\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_clicked_email ) as total_count_clicked_email\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_opened_email ) as total_count_opened_email\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_marked_email_as_spam ) as total_count_marked_email_as_spam\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_unsubscribed ) as total_count_unsubscribed\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_received_sms ) as total_count_received_sms\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_clicked_sms ) as total_count_clicked_sms\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_sent_sms ) as total_count_sent_sms\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        \n        -- sum up any count/sum_revenue metrics -> prefix with `total` since we're pulling out organic sums as well\n        , sum( count_unsubscribed_from_sms ) as total_count_unsubscribed_from_sms\n\n        -- let's pull out the organic (not attributed to a flow or campaign) revenue sums\n        \n\n        from person_campaign_flow\n    group by 1,2\n\n)\n\nselect * from agg_metrics", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__person_metrics`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:28.699185Z", "completed_at": "2024-03-04T20:48:28.708301Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:28.709548Z", "completed_at": "2024-03-04T20:48:28.709566Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023768901824951172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__person_metrics_person_id__source_relation.4897d57f8b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__person_metrics`\n    group by person_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:28.397739Z", "completed_at": "2024-03-04T20:48:28.877263Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:28.877686Z", "completed_at": "2024-03-04T20:48:28.877691Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.48259592056274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.int_klaviyo__campaign_flow_metrics", "compiled": true, "compiled_code": "with person_campaign_flow as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__person_campaign_flow`\n),\n\n-- aggregating to the campaign/flow - variation level. so a flow with A/B versions will have 2 rows\nagg_metrics as (\n\n    select\n        last_touch_campaign_id,\n        last_touch_flow_id,\n        variation_id,\n        source_relation,\n        count(distinct person_id) as total_count_unique_people,\n        min(first_event_at) as first_event_at,\n        max(last_event_at) as last_event_at\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_refunded_order ) as sum_revenue_refunded_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_placed_order ) as sum_revenue_placed_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_ordered_product ) as sum_revenue_ordered_product\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_checkout_started ) as sum_revenue_checkout_started\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( sum_revenue_cancelled_order ) as sum_revenue_cancelled_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_active_on_site ) as count_active_on_site\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_active_on_site > 0 then 1 else 0 end) as unique_count_active_on_site\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_viewed_product ) as count_viewed_product\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_viewed_product > 0 then 1 else 0 end) as unique_count_viewed_product\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_ordered_product ) as count_ordered_product\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_ordered_product > 0 then 1 else 0 end) as unique_count_ordered_product\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_placed_order ) as count_placed_order\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_placed_order > 0 then 1 else 0 end) as unique_count_placed_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_refunded_order ) as count_refunded_order\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_refunded_order > 0 then 1 else 0 end) as unique_count_refunded_order\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_received_email ) as count_received_email\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_received_email > 0 then 1 else 0 end) as unique_count_received_email\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_clicked_email ) as count_clicked_email\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_clicked_email > 0 then 1 else 0 end) as unique_count_clicked_email\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_opened_email ) as count_opened_email\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_opened_email > 0 then 1 else 0 end) as unique_count_opened_email\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_marked_email_as_spam ) as count_marked_email_as_spam\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_marked_email_as_spam > 0 then 1 else 0 end) as unique_count_marked_email_as_spam\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_unsubscribed ) as count_unsubscribed\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_unsubscribed > 0 then 1 else 0 end) as unique_count_unsubscribed\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_received_sms ) as count_received_sms\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_received_sms > 0 then 1 else 0 end) as unique_count_received_sms\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_clicked_sms ) as count_clicked_sms\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_clicked_sms > 0 then 1 else 0 end) as unique_count_clicked_sms\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_sent_sms ) as count_sent_sms\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_sent_sms > 0 then 1 else 0 end) as unique_count_sent_sms\n\n        \n        \n        -- sum up any person-level metrics to the flow/campaign level\n        , sum( count_unsubscribed_from_sms ) as count_unsubscribed_from_sms\n\n         -- only look at 'count' metrics for unique people counts\n        -- get unique number of people who did each kind of event\n        -- each record in person_campaign_flow is at the person-campaign/flow-variation level, \n        -- so we can just sum up 0s and 1s to get totals at the campaign/flow-variation grain.\n        , sum(case when count_unsubscribed_from_sms > 0 then 1 else 0 end) as unique_count_unsubscribed_from_sms\n\n        \n        from person_campaign_flow\n    group by 1,2,3,4\n)\n\nselect * from agg_metrics", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__campaign_flow_metrics`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:28.887566Z", "completed_at": "2024-03-04T20:48:28.891856Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:28.892357Z", "completed_at": "2024-03-04T20:48:28.892362Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01287984848022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_int_klaviyo__campaign_flow_metrics_variation_id__source_relation__last_touch_campaign_id__last_touch_flow_id.3ea05faa81", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        variation_id, source_relation, last_touch_campaign_id, last_touch_flow_id\n    from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__campaign_flow_metrics`\n    group by variation_id, source_relation, last_touch_campaign_id, last_touch_flow_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:28.688835Z", "completed_at": "2024-03-04T20:48:28.993552Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:28.994182Z", "completed_at": "2024-03-04T20:48:28.994188Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.30885887145996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__persons", "compiled": true, "compiled_code": "with person as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__person`\n),\n\nperson_metrics as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__person_metrics`\n),\n\nperson_join as (\n\n    select\n        person.*,\n        `count_total_campaigns`,\n  `count_total_flows`,\n  `first_event_at`,\n  `last_event_at`,\n  `first_campaign_touch_at`,\n  `last_campaign_touch_at`,\n  `first_flow_touch_at`,\n  `last_flow_touch_at`,\n  `total_sum_revenue_refunded_order`,\n  `organic_sum_revenue_refunded_order`,\n  `total_sum_revenue_placed_order`,\n  `organic_sum_revenue_placed_order`,\n  `total_sum_revenue_ordered_product`,\n  `organic_sum_revenue_ordered_product`,\n  `total_sum_revenue_checkout_started`,\n  `organic_sum_revenue_checkout_started`,\n  `total_sum_revenue_cancelled_order`,\n  `organic_sum_revenue_cancelled_order`,\n  `total_count_active_on_site`,\n  `total_count_viewed_product`,\n  `total_count_ordered_product`,\n  `total_count_placed_order`,\n  `total_count_refunded_order`,\n  `total_count_received_email`,\n  `total_count_clicked_email`,\n  `total_count_opened_email`,\n  `total_count_marked_email_as_spam`,\n  `total_count_unsubscribed`,\n  `total_count_received_sms`,\n  `total_count_clicked_sms`,\n  `total_count_sent_sms`,\n  `total_count_unsubscribed_from_sms`\n\n    from person\n    left join person_metrics on (\n        person.person_id = person_metrics.person_id\n        and person.source_relation = person_metrics.source_relation\n    )\n\n)\n\nselect *\nfrom person_join", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__persons`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:28.997472Z", "completed_at": "2024-03-04T20:48:29.005174Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:29.006345Z", "completed_at": "2024-03-04T20:48:29.006351Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011232137680053711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__persons_person_id__source_relation.b223d703b3", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        person_id, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__persons`\n    group by person_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:29.001753Z", "completed_at": "2024-03-04T20:48:29.005533Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:29.006639Z", "completed_at": "2024-03-04T20:48:29.006644Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011259078979492188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_klaviyo__persons_person_id.624a41e75a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect person_id\nfrom `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__persons`\nwhere person_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:28.884233Z", "completed_at": "2024-03-04T20:48:29.515468Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:29.516574Z", "completed_at": "2024-03-04T20:48:29.516587Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.6380469799041748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__flows", "compiled": true, "compiled_code": "with flow as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__flow`\n),\n\nflow_metrics as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__campaign_flow_metrics`\n),\n\nflow_join as (\n    \n    \n\n    select\n        flow.*, -- has flow_id and source_relation\n        `variation_id`,\n  `total_count_unique_people`,\n  `first_event_at`,\n  `last_event_at`,\n  `sum_revenue_refunded_order`,\n  `sum_revenue_placed_order`,\n  `sum_revenue_ordered_product`,\n  `sum_revenue_checkout_started`,\n  `sum_revenue_cancelled_order`,\n  `count_active_on_site`,\n  `unique_count_active_on_site`,\n  `count_viewed_product`,\n  `unique_count_viewed_product`,\n  `count_ordered_product`,\n  `unique_count_ordered_product`,\n  `count_placed_order`,\n  `unique_count_placed_order`,\n  `count_refunded_order`,\n  `unique_count_refunded_order`,\n  `count_received_email`,\n  `unique_count_received_email`,\n  `count_clicked_email`,\n  `unique_count_clicked_email`,\n  `count_opened_email`,\n  `unique_count_opened_email`,\n  `count_marked_email_as_spam`,\n  `unique_count_marked_email_as_spam`,\n  `count_unsubscribed`,\n  `unique_count_unsubscribed`,\n  `count_received_sms`,\n  `unique_count_received_sms`,\n  `count_clicked_sms`,\n  `unique_count_clicked_sms`,\n  `count_sent_sms`,\n  `unique_count_sent_sms`,\n  `count_unsubscribed_from_sms`,\n  `unique_count_unsubscribed_from_sms`\n\n    from flow\n    left join flow_metrics on (\n      flow.flow_id = flow_metrics.last_touch_flow_id\n      and\n      flow.source_relation = flow_metrics.source_relation\n    )\n),\n\nfinal as (\n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(flow_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(variation_id as string), '_dbt_utils_surrogate_key_null_') as string))) as flow_variation_key\n\n    from flow_join\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__flows`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:29.533371Z", "completed_at": "2024-03-04T20:48:29.540140Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:29.542100Z", "completed_at": "2024-03-04T20:48:29.542113Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02131509780883789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_klaviyo__flows_flow_variation_key.152c0d960b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect flow_variation_key\nfrom `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__flows`\nwhere flow_variation_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:29.524097Z", "completed_at": "2024-03-04T20:48:29.540706Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:29.542583Z", "completed_at": "2024-03-04T20:48:29.542590Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023577213287353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__flows_flow_variation_key__source_relation.925d4118dc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        flow_variation_key, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__flows`\n    group by flow_variation_key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:28.880677Z", "completed_at": "2024-03-04T20:48:29.664883Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:29.666852Z", "completed_at": "2024-03-04T20:48:29.666868Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7892498970031738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.klaviyo.klaviyo__campaigns", "compiled": true, "compiled_code": "with campaign as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_klaviyo`.`stg_klaviyo__campaign`\n),\n\ncampaign_metrics as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_klaviyo`.`int_klaviyo__campaign_flow_metrics`\n),\n\ncampaign_join as (\n    \n    \n\n    select\n        campaign.*, -- has campaign_id and source_relation\n        `variation_id`,\n  `total_count_unique_people`,\n  `first_event_at`,\n  `last_event_at`,\n  `sum_revenue_refunded_order`,\n  `sum_revenue_placed_order`,\n  `sum_revenue_ordered_product`,\n  `sum_revenue_checkout_started`,\n  `sum_revenue_cancelled_order`,\n  `count_active_on_site`,\n  `unique_count_active_on_site`,\n  `count_viewed_product`,\n  `unique_count_viewed_product`,\n  `count_ordered_product`,\n  `unique_count_ordered_product`,\n  `count_placed_order`,\n  `unique_count_placed_order`,\n  `count_refunded_order`,\n  `unique_count_refunded_order`,\n  `count_received_email`,\n  `unique_count_received_email`,\n  `count_clicked_email`,\n  `unique_count_clicked_email`,\n  `count_opened_email`,\n  `unique_count_opened_email`,\n  `count_marked_email_as_spam`,\n  `unique_count_marked_email_as_spam`,\n  `count_unsubscribed`,\n  `unique_count_unsubscribed`,\n  `count_received_sms`,\n  `unique_count_received_sms`,\n  `count_clicked_sms`,\n  `unique_count_clicked_sms`,\n  `count_sent_sms`,\n  `unique_count_sent_sms`,\n  `count_unsubscribed_from_sms`,\n  `unique_count_unsubscribed_from_sms`\n\n    from campaign\n    left join campaign_metrics on (\n      campaign.campaign_id = campaign_metrics.last_touch_campaign_id\n      and\n      campaign.source_relation = campaign_metrics.source_relation\n    )\n),\n\nfinal as (\n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(campaign_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(variation_id as string), '_dbt_utils_surrogate_key_null_') as string))) as campaign_variation_key\n\n    from campaign_join\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__campaigns`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:29.687139Z", "completed_at": "2024-03-04T20:48:29.693684Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:29.695633Z", "completed_at": "2024-03-04T20:48:29.695646Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02290511131286621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.not_null_klaviyo__campaigns_campaign_variation_key.c4588cdadc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_variation_key\nfrom `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__campaigns`\nwhere campaign_variation_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T20:48:29.677076Z", "completed_at": "2024-03-04T20:48:29.694226Z"}, {"name": "execute", "started_at": "2024-03-04T20:48:29.696114Z", "completed_at": "2024-03-04T20:48:29.696121Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025579214096069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.klaviyo.dbt_utils_unique_combination_of_columns_klaviyo__campaigns_campaign_variation_key__source_relation.e5d14aee28", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_variation_key, source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_klaviyo`.`klaviyo__campaigns`\n    group by campaign_variation_key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 4.3907997608184814, "args": {"use_colors": true, "log_format": "default", "log_level_file": "debug", "log_level": "info", "select": [], "invocation_command": "dbt docs generate", "project_dir": "/Users/renee/Documents/dbt/klaviyo/develop", "vars": {}, "show_resource_report": false, "partial_parse": true, "log_file_max_bytes": 10485760, "static": false, "log_format_file": "debug", "exclude": [], "printer_width": 80, "partial_parse_file_diff": true, "introspect": true, "write_json": true, "print": true, "version_check": true, "quiet": false, "static_parser": true, "cache_selected_only": false, "defer": false, "favor_state": false, "empty_catalog": false, "warn_error_options": {"include": [], "exclude": []}, "which": "generate", "compile": true, "indirect_selection": "eager", "populate_cache": true, "strict_mode": false, "log_path": "/Users/renee/Documents/dbt/klaviyo/develop/logs", "use_colors_file": true, "macro_debugging": false, "enable_legacy_logger": false, "profiles_dir": "/Users/renee/.dbt", "send_anonymous_usage_stats": true}}